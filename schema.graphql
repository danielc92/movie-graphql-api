schema {
  query: queries
  mutation: mutations
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""A actor type."""
type Actor {
  id: Int
  actorFirstName: String
  actorLastName: String
  actorAvatarUrl: String
  actorDob: String
  casts: [Cast]
  country: Country
  createdAt: Float
  updatedAt: Float
}

"""An actor input type."""
input ActorInputType {
  actorFirstName: String!
  actorLastName: String!
  actorAvatarUrl: String
  actorDob: String
  countryId: Int!
}

"""An award associated with movies"""
type Award {
  id: Int
  awardName: String
  awardYear: Int
  createdAt: Float
  updatedAt: Float
}

"""Used to create a new Award"""
input AwardInput {
  awardName: String!
  awardYear: Int!
}

"""Represents a single Cast for a Movie"""
type Cast {
  id: Int
  castFirstName: String
  castLastName: String
  castAvatarUrl: String
  createdAt: Float
  updatedAt: Float
  actor: Actor
  movie: Movie
}

"""Aids with the creation of a new Cast."""
input CastInput {
  castFirstName: String!
  castLastName: String!
  castAvatarUrl: String
  actorId: Int!
  movieId: Int!
}

"""A country type."""
type Country {
  id: Int
  countryName: String
  createdAt: Float
  updatedAt: Float
}

"""A country input type."""
input CountryInputType {
  countryName: String!
}

"""A director type."""
type Director {
  id: Int
  directorFirstName: String
  directorLastName: String
  directorDob: String
  createdAt: Float
  updatedAt: Float
}

"""An  director input type."""
input DirectorInputType {
  directorFirstName: String!
  directorLastName: String!
  directorDob: String
}

"""Movie type"""
type Movie {
  id: Int
  movieTitle: String
  movieReleaseDate: Float
  movieGenre: MovieGenreEnum
  movieType: MovieTypeEnum
  movieImageUrl: String
  movieDurationMins: Int
  movieHasBluray: Boolean
  reviews: [Review]
  awards: [Award]
  directors: [Director]
  soundtracks: [Soundtrack]
  quotes: [Quote]
  casts: [Cast]
  createdAt: Float
  updatedAt: Float
}

"""Possible values for movie genre."""
enum MovieGenreEnum {
  HORROR
  ADVENTURE
  DRAMA
  THRILLER
  COMEDY
  ROMANCE
  DOCUMENTARY
  ACTION
  OTHER
}

"""Used to insert new movies."""
input MovieInput {
  movieTitle: String!
  movieReleaseDate: String!
  movieGenre: MovieGenreEnum!
  movieType: MovieTypeEnum!
  movieImageUrl: String
  movieDurationMins: Int
  movieHasBluray: Boolean
}

"""Used to update existing movies."""
input MoviePatch {
  movieTitle: String
  movieReleaseDate: String
  movieGenre: MovieGenreEnum
  movieType: MovieTypeEnum
  movieImageUrl: String
  movieDurationMins: Int
  movieHasBluray: Boolean
}

"""Possible values for movie type."""
enum MovieTypeEnum {
  TV_SERIES
  MOVIE
  OTHER
}

"""The root mutation."""
type mutations {
  """Create a single Review."""
  createReview(patch: ReviewInput): Review

  """Create a single Quote for a Movie"""
  createQuote(patch: QuoteInput): Quote

  """Create a single Soundtrack for a Movie"""
  createSoundtrack(patch: SoundtrackInput): Soundtrack

  """Create a single Movie."""
  createMovie(patch: MovieInput): Movie

  """Update an existing Movie."""
  updateMovie(id: Int!, patch: MoviePatch): Movie

  """Create a single Actor."""
  createActor(patch: ActorInputType): Actor

  """Create a single Director."""
  createDirector(patch: DirectorInputType): Director

  """Create a single Country."""
  createCountry(patch: CountryInputType): Country

  """Create a single Cast for a Movie."""
  createCast(patch: CastInput): Cast

  """Create a single User."""
  createUser(patch: UserInput): User

  """Update an existing User"""
  updateUser(userId: ID!, patch: UserPatch): User

  """Add a Movie to User's movieWishList."""
  addToWishList(userId: Int!, movieId: Int!): String

  """Add a Movie to User's movieWatchedList."""
  addToWatchedList(userId: Int!, movieId: Int!): String

  """Associate an existing Award with an existing Movie"""
  linkMovieAward(movieId: Int!, awardId: Int!): String

  """Associate an existing Director with an existing Movie"""
  linkMovieDirector(movieId: Int!, directorId: Int!): String

  """Create a single Award."""
  createAward(patch: AwardInput): Award
}

"""The root query."""
type queries {
  """Returns a list of Movies."""
  movies: [Movie]

  """Returns a list of Quotes."""
  quotes: [Quote]

  """Returns a list of Soundtracks."""
  soundtracks: [Soundtrack]

  """Returns a list of Actors."""
  actors: [Actor]

  """Returns a list of Casts."""
  casts: [Cast]

  """Returns a list of Reviews."""
  reviews: [Review]

  """Returns a list of Directors."""
  directors: [Director]

  """Returns a list of Countries."""
  countries: [Country]

  """Returns a list of Users."""
  users: [User]

  """Returns a list of Awards."""
  awards: [Award]
}

"""Represents a Quote for a Movie."""
type Quote {
  id: Int
  quoteCastName: String
  quoteText: String
  movie: Movie
  createdAt: Float
  updatedAt: Float
}

"""Aids with creating a new Quote."""
input QuoteInput {
  movieId: Int!
  quoteCastName: String!
  quoteText: String!
}

"""Represents a Movie review."""
type Review {
  id: Int
  movie: Movie
  user: User
  reviewText: String
  reviewRating: ReviewRatingEnum
  createdAt: Float
  updatedAt: Float
}

"""A type to aid with the creation of a Review."""
input ReviewInput {
  movieId: Int!
  userId: Int!
  reviewText: String!
  reviewRating: ReviewRatingEnum!
}

"""List of allowed values for a Review rating"""
enum ReviewRatingEnum {
  ONE_OUT_OF_TEN
  TWO_OUT_OF_TEN
  THREE_OUT_OF_TEN
  FOUR_OUT_OF_TEN
  FIVE_OUT_OF_TEN
  SIX_OUT_OF_TEN
  SEVEN_OUT_OF_TEN
  EIGHT_OUT_OF_TEN
  NINE_OUT_OF_TEN
  TEN_OUT_OF_TEN
}

"""Represents a Soundtrack for a Movie."""
type Soundtrack {
  id: Int
  movie: Movie
  soundtrackName: String
  soundtrackComposedBy: String
  createdAt: Float
  updatedAt: Float
}

"""Aids with creating a new Soundtrack."""
input SoundtrackInput {
  movieId: ID!
  soundtrackName: String!
  soundtrackComposedBy: String!
}

"""A user"""
type User {
  id: Int
  email: String
  password: String
  firstName: String
  lastName: String
  createdAt: Float
  updatedAt: Float
  movieWatchedList: [Movie]
  movieWishList: [Movie]
}

"""Used to create new users"""
input UserInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
}

"""A type to aid updating a User type."""
input UserPatch {
  email: String
  password: String
  firstName: String
  lastName: String
  createdAt: Float
  updatedAt: Float
}

